<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/Decoration.cs" timestamp="1498573346394">
        <mark key="'" line="71" column="19" />
        <mark key="[" line="26" column="41" />
        <mark key="]" line="26" column="41" />
        <mark key="^" line="26" column="41" />
        <mark key="." line="26" column="41" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/DataService/ShapeData.cs" timestamp="1498570609670">
        <mark key="'" line="50" column="4" />
        <mark key="[" line="9" column="40" />
        <mark key="]" line="11" column="23" />
        <mark key="." line="11" column="23" />
        <mark key="^" line="11" column="23" />
      </file>
      <file name="$USER_HOME$/Projects/mocha-given/index.d.ts" timestamp="1490284104781">
        <mark key="'" line="1" column="0" />
        <mark key="[" line="11" column="0" />
        <mark key="]" line="11" column="0" />
        <mark key="." line="11" column="0" />
        <mark key="^" line="1" column="11" />
      </file>
      <file name="/a.dummy" timestamp="1498741252881">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/phpold/kuze_utils.php" timestamp="1497784331390">
        <mark key="'" line="59" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/CameraMovement.cs" timestamp="1497450852828">
        <mark key="'" line="193" column="4" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/updater/updater.helpers.ts" timestamp="1492791203674">
        <mark key="'" line="25" column="36" />
        <mark key="[" line="33" column="48" />
        <mark key="]" line="34" column="24" />
        <mark key="." line="34" column="24" />
        <mark key="^" line="34" column="24" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/UI/ExitToast.cs" timestamp="1497532567374">
        <mark key="'" line="40" column="0" />
        <mark key="[" line="2" column="0" />
        <mark key="]" line="2" column="0" />
        <mark key="." line="2" column="0" />
        <mark key="^" line="10" column="9" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/PieceGenerator.cs" timestamp="1498668509814">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="43" column="0" />
        <mark key="]" line="43" column="0" />
        <mark key="." line="43" column="0" />
        <mark key="^" line="78" column="66" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch.json" timestamp="1492339698148">
        <mark key="'" line="21" column="0" />
        <mark key="[" line="2" column="14" />
        <mark key="]" line="2" column="13" />
        <mark key="." line="2" column="13" />
        <mark key="^" line="2" column="13" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch_3.json" timestamp="1492678325641">
        <mark key="'" line="4983" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="48708" />
        <mark key="^" line="0" column="48708" />
        <mark key="." line="0" column="48708" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/UI/GameEditor/SaveButton.cs" timestamp="1498572998507">
        <mark key="'" line="74" column="42" />
        <mark key="[" line="74" column="42" />
        <mark key="]" line="74" column="50" />
        <mark key="." line="74" column="50" />
        <mark key="^" line="74" column="50" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/PuzzlePiece.cs" timestamp="1497973981788">
        <mark key="'" line="70" column="42" />
        <mark key="[" line="199" column="8" />
        <mark key="]" line="199" column="42" />
        <mark key="." line="199" column="42" />
        <mark key="^" line="199" column="42" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/public/js/angular/kuze_business_utils-v11.js" timestamp="1499174664320">
        <mark key="'" line="53" column="9" />
        <mark key="[" line="52" column="2" />
        <mark key="]" line="52" column="4" />
        <mark key="." line="52" column="4" />
        <mark key="^" line="52" column="4" />
      </file>
      <file name="/kuze_config.php" timestamp="1499159276667">
        <mark key="[" line="11" column="0" />
        <mark key="]" line="11" column="69" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/angular/business_modal_client_payment.php" timestamp="1499847243075">
        <mark key="'" line="112" column="37" />
        <mark key="[" line="56" column="59" />
        <mark key="]" line="56" column="62" />
        <mark key="." line="56" column="62" />
        <mark key="^" line="56" column="62" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/db_scripts/DB_Changes_v300.sql" timestamp="1499162835057">
        <mark key="[" line="3" column="0" />
        <mark key="]" line="35" column="57" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/public/js/angular/kuze_enduser_app.js" timestamp="1498045366621">
        <mark key="'" line="1187" column="20" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/db_scripts/2017_07_04_Business_invoices.sql" timestamp="1499168657271">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="54" />
        <mark key="." line="1" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/api/invoices.php" timestamp="1498725747370">
        <mark key="'" line="95" column="4" />
        <mark key="[" line="7" column="6" />
        <mark key="]" line="7" column="6" />
        <mark key="." line="7" column="6" />
        <mark key="^" line="115" column="43" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/AndroidGalleryImageSaver.cs" timestamp="1497519923388">
        <mark key="'" line="31" column="0" />
        <mark key="[" line="15" column="0" />
        <mark key="]" line="15" column="0" />
        <mark key="^" line="15" column="16" />
        <mark key="." line="15" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/kuze_db.php" timestamp="1499159045352">
        <mark key="'" line="161" column="27" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/package.json" timestamp="1492003154014">
        <mark key="'" line="6" column="19" />
        <mark key="[" line="37" column="19" />
        <mark key="]" line="37" column="24" />
        <mark key="." line="37" column="24" />
        <mark key="^" line="37" column="24" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/kuze_payment_utils.php" timestamp="1499171287564">
        <mark key="'" line="241" column="48" />
        <mark key="[" line="244" column="100" />
        <mark key="]" line="244" column="115" />
        <mark key="^" line="244" column="115" />
        <mark key="." line="244" column="115" />
      </file>
      <file name="$USER_HOME$/Projects/mocha-given/package.json" timestamp="1490283218372">
        <mark key="'" line="10" column="18" />
        <mark key="[" line="10" column="14" />
        <mark key="]" line="10" column="18" />
        <mark key="^" line="10" column="18" />
        <mark key="." line="10" column="18" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/kuze_config/dev/kuze_config.php" timestamp="1499164550456">
        <mark key="[" line="14" column="21" />
        <mark key="]" line="14" column="23" />
        <mark key="." line="14" column="23" />
        <mark key="^" line="14" column="23" />
      </file>
      <file name="$USER_HOME$/Projects/luftzig.com/front/src/Styling.elm" timestamp="1497700286779">
        <mark key="'" line="39" column="31" />
        <mark key="[" line="39" column="47" />
        <mark key="]" line="39" column="47" />
        <mark key="." line="39" column="47" />
        <mark key="^" line="39" column="47" />
      </file>
      <file name="$USER_HOME$/Projects/luftzig.com/front/elm-stuff/packages/rtfeldman/elm-css/8.1.0/src/Css.elm" timestamp="1497694656695">
        <mark key="'" line="4371" column="8" />
      </file>
      <file name="$USER_HOME$/Projects/luftzig.com/front/src/View.elm" timestamp="1497799291882">
        <mark key="'" line="94" column="10" />
        <mark key="[" line="2" column="7" />
        <mark key="]" line="2" column="15" />
        <mark key="." line="2" column="15" />
        <mark key="^" line="2" column="15" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/kuze_const.php" timestamp="1499168789899">
        <mark key="'" line="55" column="34" />
        <mark key="[" line="51" column="23" />
        <mark key="]" line="51" column="24" />
        <mark key="." line="51" column="24" />
        <mark key="^" line="48" column="13" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/api/api_admin.php" timestamp="1499175417121">
        <mark key="'" line="611" column="44" />
        <mark key="[" line="3154" column="114" />
        <mark key="]" line="3154" column="138" />
        <mark key="." line="3154" column="138" />
        <mark key="^" line="3154" column="138" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/public/js/angular/config-js.php" timestamp="1499175214438">
        <mark key="'" line="152" column="0" />
        <mark key="[" line="72" column="20" />
        <mark key="]" line="73" column="8" />
        <mark key="." line="73" column="8" />
        <mark key="^" line="73" column="8" />
      </file>
      <file name="vim_settings.xml" timestamp="1498470093079">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/site.conf" timestamp="1497783226999">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="39" column="0" />
        <mark key="." line="8" column="4" />
        <mark key="^" line="8" column="4" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" timestamp="1499845165123">
        <mark key="'" line="3" column="0" />
        <mark key="^" line="3" column="4" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/angular/business_config.php" timestamp="1498044504233">
        <mark key="[" line="31" column="0" />
        <mark key="]" line="31" column="0" />
        <mark key="." line="31" column="0" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch_5.json" timestamp="1492685289704">
        <mark key="'" line="7" column="18" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="9003" />
        <mark key="^" line="0" column="9003" />
        <mark key="." line="0" column="9003" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/consoles/.datagrid/cell" timestamp="1499162790640">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/luftzig.com/front/src/Main.elm" timestamp="1497695316614">
        <mark key="'" line="11" column="17" />
        <mark key="[" line="24" column="8" />
        <mark key="]" line="24" column="23" />
        <mark key="." line="24" column="23" />
        <mark key="^" line="24" column="23" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" timestamp="1499846311253">
        <mark key="'" line="1941" column="44" />
        <mark key="[" line="1933" column="86" />
        <mark key="]" line="1933" column="87" />
        <mark key="." line="1933" column="86" />
        <mark key="^" line="1933" column="100" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/ImmortalManager.cs" timestamp="1498141711502">
        <mark key="'" line="123" column="73" />
        <mark key="[" line="127" column="67" />
        <mark key="]" line="127" column="70" />
        <mark key="^" line="127" column="70" />
        <mark key="." line="127" column="70" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/DataService/DataService.cs" timestamp="1498473617414">
        <mark key="'" line="16" column="24" />
        <mark key="[" line="38" column="54" />
        <mark key="]" line="38" column="54" />
        <mark key="^" line="38" column="56" />
        <mark key="." line="38" column="54" />
      </file>
      <file name="$USER_HOME$/Projects/the_bar_node/server/test/greeter-spec.ts" timestamp="1490284305782">
        <mark key="'" line="4" column="40" />
        <mark key="[" line="14" column="22" />
        <mark key="]" line="14" column="22" />
        <mark key="." line="14" column="22" />
        <mark key="^" line="12" column="37" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/updater/updater.model.ts" timestamp="1492787491819">
        <mark key="'" line="19" column="105" />
        <mark key="[" line="19" column="105" />
        <mark key="]" line="19" column="105" />
        <mark key="^" line="19" column="105" />
        <mark key="." line="19" column="105" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/DataService/StageData.cs" timestamp="1498123623435">
        <mark key="'" line="9" column="14" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch_6.json" timestamp="1492685876216">
        <mark key="'" line="452" column="0" />
        <mark key="[" line="517" column="35" />
        <mark key="]" line="517" column="33" />
        <mark key="^" line="517" column="33" />
        <mark key="." line="517" column="33" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/GardenScreenshot.cs" timestamp="1498662602044">
        <mark key="'" line="132" column="52" />
        <mark key="[" line="131" column="27" />
        <mark key="]" line="132" column="52" />
        <mark key="." line="132" column="52" />
        <mark key="^" line="132" column="52" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch_1.js" timestamp="1498387185354">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="38" column="0" />
        <mark key="]" line="195" column="1" />
        <mark key="^" line="195" column="1" />
        <mark key="." line="167" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/invoice/create-doc.php" timestamp="1498744316602">
        <mark key="'" line="147" column="0" />
        <mark key="[" line="64" column="0" />
        <mark key="]" line="133" column="1" />
        <mark key="." line="101" column="23" />
        <mark key="^" line="101" column="23" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/appreciate-client/appreciate-client.ts" timestamp="1492789578918">
        <mark key="'" line="82" column="20" />
        <mark key="[" line="65" column="41" />
        <mark key="]" line="65" column="51" />
        <mark key="^" line="65" column="51" />
        <mark key="." line="65" column="51" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/appreciate-client/patch-request-converter.ts" timestamp="1492680861043">
        <mark key="'" line="64" column="0" />
        <mark key="[" line="65" column="25" />
        <mark key="]" line="65" column="31" />
        <mark key="^" line="65" column="31" />
        <mark key="." line="65" column="31" />
      </file>
      <file name="/dummy.sql" timestamp="1499175222411">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/UI/GameEditor/LoadButton.cs" timestamp="1498489326900">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="7" column="0" />
        <mark key="]" line="7" column="0" />
        <mark key="^" line="37" column="52" />
        <mark key="." line="7" column="0" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/consoles/db/6e25fe0b-98f3-46a4-9336-01e7aed49277/console.sql" timestamp="1499171616631">
        <mark key="[" line="0" column="52" />
        <mark key="]" line="0" column="75" />
        <mark key="^" line="0" column="75" />
        <mark key="." line="0" column="75" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/Borders.cs" timestamp="1497869872208">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="27" column="0" />
        <mark key="]" line="27" column="0" />
        <mark key="^" line="14" column="49" />
        <mark key="." line="27" column="0" />
      </file>
      <file name="/Dummy.txt" timestamp="1499845223758">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/luftzig.com/front/src/Sections/CodeSection.elm" timestamp="1497799548443">
        <mark key="'" line="39" column="20" />
        <mark key="[" line="22" column="21" />
        <mark key="]" line="22" column="20" />
        <mark key="." line="22" column="20" />
        <mark key="^" line="22" column="20" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" timestamp="1498746722575">
        <mark key="'" line="9" column="26" />
        <mark key="[" line="9" column="26" />
        <mark key="]" line="9" column="57" />
        <mark key="^" line="8" column="23" />
        <mark key="." line="8" column="23" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/kuze_login.php" timestamp="1497776244958">
        <mark key="'" line="43" column="8" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch_1.json" timestamp="1492339311193">
        <mark key="'" line="2669" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="2669" column="0" />
        <mark key="^" line="0" column="31135" />
        <mark key="." line="0" column="31135" />
      </file>
    </filemarks>
    <jumps>
      <jump line="466" column="34" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="470" column="10" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="471" column="34" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="21" column="51" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="149" column="40" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="137" column="0" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="8" column="24" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="9" column="26" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="5570" column="21" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5822" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="14" column="66" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="202" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="202" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="791" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="161" column="27" filename="$USER_HOME$/Projects/kuze/php/kuze_db.php" />
      <jump line="781" column="41" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="319" column="31" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="1921" column="24" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="5522" column="23" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="5750" column="17" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="5861" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5860" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="6101" column="1" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="6100" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="3378" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="6106" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="1983" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="1919" column="9" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="1947" column="11" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5519" column="23" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5745" column="17" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5772" column="81" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5780" column="14" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5788" column="9" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5792" column="15" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="1918" column="9" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="1892" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="3" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="1889" column="57" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="1339" column="12" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5382" column="24" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5381" column="25" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="4723" column="8" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5275" column="8" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="3380" column="19" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="3383" column="2" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="189" column="2" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="2" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="4729" column="43" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5059" column="59" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5282" column="43" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="213" column="17" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="47" column="0" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="2263" column="56" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="49" column="34" filename="$USER_HOME$/Projects/kuze/php/kuze_const.php" />
      <jump line="152" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/config-js.php" />
      <jump line="1926" column="52" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5742" column="15" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="2002" column="6" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="2269" column="49" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="3132" column="11" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="3133" column="24" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="3167" column="37" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="575" column="55" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="593" column="55" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="611" column="44" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="237" column="38" filename="$USER_HOME$/Projects/kuze/php/kuze_payment_utils.php" />
      <jump line="113" column="8" filename="$USER_HOME$/Projects/kuze/php/kuze_payment_utils.php" />
      <jump line="241" column="48" filename="$USER_HOME$/Projects/kuze/php/kuze_payment_utils.php" />
      <jump line="7" column="27" filename="$USER_HOME$/Projects/kuze/php/kuze_payment_utils.php" />
      <jump line="661" column="9" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/kuze_business_utils-v11.js" />
      <jump line="5047" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="4871" column="2" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5222" column="19" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5438" column="6" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5278" column="45" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5268" column="19" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="4690" column="8" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="4715" column="19" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5269" column="19" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="1892" column="22" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="727" column="8" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/kuze_business_utils-v11.js" />
      <jump line="48" column="2" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/kuze_business_utils-v11.js" />
      <jump line="738" column="6" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/kuze_business_utils-v11.js" />
      <jump line="4621" column="49" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5280" column="82" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="1888" column="20" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="1893" column="12" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="4716" column="19" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5270" column="19" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="4726" column="18" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="53" column="9" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/kuze_business_utils-v11.js" />
      <jump line="5283" column="12" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="4725" column="18" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5272" column="19" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="1955" column="19" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5886" column="4" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="1934" column="44" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="13" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
    </jumps>
    <registers>
      <register name="&quot;" type="4">
        <text>label</text>
      </register>
      <register name="-" type="4">
        <text>label</text>
      </register>
      <register name="/" type="4">
        <text encoding="base64">XDxidXNpbmVzc0NsaWVuZENhcmRQYXltZW50XD4=</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">ICAgICAgICAgIDxvcHRpb24gZGF0YS1uZy1yZXBlYXQ9ImJhbmsgaW4gYmFua3MiIHZhbHVlPSJ7e2JhbmsuY29kZX19Ij57e2JhbmsubmFtZX19PC9vcHRpb24+Cg==</text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">ICAgIAo=</text>
      </register>
      <register name="r" type="4">
        <keys>
          <key char="64" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="123" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="121" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="65" code="0" mods="0" />
          <key char="44" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="44" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="109" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="34" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="65" code="0" mods="0" />
          <key char="34" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="65" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="125" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="97" code="0" mods="0" />
          <key char="44" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="48" code="0" mods="0" />
        </keys>
      </register>
      <register name="3" type="2">
        <text encoding="base64">ICAgIGNvbnNvbGUubG9nKCJhZGRpbmcgbWF0Y2ggdG8gc2NvcGU6ICIsIHBvc3NpYmxlTWF0Y2gsIGZpZWxkcyk7Cg==</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICBmdW5jdGlvbgo=</text>
      </register>
      <register name="t" type="4">
        <keys>
          <key char="119" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="123" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="65" code="0" mods="0" />
          <key char="44" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="109" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="34" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="65" code="0" mods="0" />
          <key char="34" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="111" code="0" mods="0" />
          <key char="125" code="0" mods="0" />
          <key char="44" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="48" code="0" mods="0" />
        </keys>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICAgIAo=</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAgIGNvbnNvbGUubG9nKCJQb3NzaWJsZSBwYXltZW50cyBpbmZvOiAiLCBwb3NzaWJsZU1hdGNoZXMpOwo=</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">PD9waHAKcmVxdWlyZV9vbmNlKCRfU0VSVkVSWydET0NVTUVOVF9ST09UJ10uIi9rdXplX2xhbmcucGhwIik7Cj8+Cjw/cGhwIGluY2x1ZGUgKCdidXNpbmVzcy1hcHAtdjExLmpzJykgPz4K</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">ICAgICAgICAucmVkdWNlKGZ1bmN0aW9uICk7Cg==</text>
      </register>
      <register name=":" type="4">
        <text>%s/&quot;yPos&quot;: 0.20000000298023225/&quot;yPos&quot;: 0.1/</text>
      </register>
    </registers>
    <search>
      <last-search encoding="base64">XDxidXNpbmVzc0NsaWVuZENhcmRQYXltZW50XD4=</last-search>
      <last-offset />
      <last-pattern encoding="base64">XDxidXNpbmVzc0NsaWVuZENhcmRQYXltZW50XD4=</last-pattern>
      <last-replace>&quot;yPos&quot;: 0.1</last-replace>
      <last-substitute>&quot;yPos&quot;: 0.20000000298023225</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry>\/business_config</entry>
        <entry>\cUser</entry>
        <entry>cliendCard</entry>
        <entry>cliendBu</entry>
        <entry>CliendB</entry>
        <entry>Cliend</entry>
        <entry>BusinessCo</entry>
        <entry>\cbusinessconfig</entry>
        <entry encoding="base64">XDxjdXJyZW50Q2xpZW50XD4=</entry>
        <entry>admin</entry>
        <entry>admin\/users</entry>
        <entry>business\/u</entry>
        <entry>business_config\/set</entry>
        <entry>user\/payments</entry>
        <entry>users\/payments</entry>
        <entry encoding="base64">XDxwYXltZW50c1w+</entry>
        <entry>initiatePayment</entry>
        <entry>initiateP</entry>
        <entry encoding="base64">XDxnZXRDbGllbnRQYXltZW50c1Byb21pc2VcPg==</entry>
        <entry encoding="base64">XDxidXNpbmVzc0NsaWVuZENhcmRQYXltZW50XD4=</entry>
      </history-search>
      <history-cmd>
        <entry encoding="base64">JzwsJz5zLzsvJ107Lw==</entry>
        <entry>s/, /\r/g</entry>
        <entry>s/, /,\r/g</entry>
        <entry>Reg</entry>
        <entry>reg</entry>
        <entry encoding="base64">JzwsJz5zL1wkLy9n</entry>
        <entry encoding="base64">JzwsJz5zLywkLyAuICIsIi8=</entry>
        <entry encoding="base64">JzwsJz5zLywkLyAuICIsIiAuLw==</entry>
        <entry encoding="base64">JzwsJz5zL1xFLykv</entry>
        <entry encoding="base64">JzwsJz5zL1w+Lykv</entry>
        <entry encoding="base64">JzwsJz5zLyAuLykgLi8=</entry>
        <entry encoding="base64">JzwsJz5zLyBcLi8pIC4v</entry>
        <entry encoding="base64">JzwsJz5zLyA9LiokLywv</entry>
        <entry encoding="base64">JzwsJz5zLyB8fCBudWxsLy8=</entry>
        <entry encoding="base64">JzwsJz5zLywgLywiIC4gIi8=</entry>
        <entry encoding="base64">JzwsJz5zLywgLywiIC4gIi9n</entry>
        <entry encoding="base64">JzwsJz5zLyBcLiAvIC5cci9n</entry>
        <entry encoding="base64">JzwsJz5zLyIiLyInJyIv</entry>
        <entry encoding="base64">JzwsJz5zLywvJywv</entry>
        <entry encoding="base64">JzwsJz5zLycvLw==</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed OPEN_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>shift ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed CLOSE_BRACKET</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>
<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/Decoration.cs" timestamp="1498573346394">
        <mark key="'" line="71" column="19" />
        <mark key="[" line="26" column="41" />
        <mark key="]" line="26" column="41" />
        <mark key="^" line="26" column="41" />
        <mark key="." line="26" column="41" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/DataService/ShapeData.cs" timestamp="1498570609670">
        <mark key="'" line="50" column="4" />
        <mark key="[" line="9" column="40" />
        <mark key="]" line="11" column="23" />
        <mark key="." line="11" column="23" />
        <mark key="^" line="11" column="23" />
      </file>
      <file name="$USER_HOME$/Projects/mocha-given/index.d.ts" timestamp="1490284104781">
        <mark key="'" line="1" column="0" />
        <mark key="[" line="11" column="0" />
        <mark key="]" line="11" column="0" />
        <mark key="." line="11" column="0" />
        <mark key="^" line="1" column="11" />
      </file>
      <file name="/a.dummy" timestamp="1498741252881">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/phpold/kuze_utils.php" timestamp="1497784331390">
        <mark key="'" line="59" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/CameraMovement.cs" timestamp="1497450852828">
        <mark key="'" line="193" column="4" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/updater/updater.helpers.ts" timestamp="1492791203674">
        <mark key="'" line="25" column="36" />
        <mark key="[" line="33" column="48" />
        <mark key="]" line="34" column="24" />
        <mark key="." line="34" column="24" />
        <mark key="^" line="34" column="24" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/UI/ExitToast.cs" timestamp="1497532567374">
        <mark key="'" line="40" column="0" />
        <mark key="[" line="2" column="0" />
        <mark key="]" line="2" column="0" />
        <mark key="." line="2" column="0" />
        <mark key="^" line="10" column="9" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/UI/GameEditor/ShareGardenButton.cs" timestamp="1498649510899">
        <mark key="'" line="24" column="51" />
        <mark key="[" line="29" column="0" />
        <mark key="]" line="29" column="36" />
        <mark key="." line="29" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/PieceGenerator.cs" timestamp="1498668509814">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="43" column="0" />
        <mark key="]" line="43" column="0" />
        <mark key="." line="43" column="0" />
        <mark key="^" line="78" column="66" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch.json" timestamp="1492339698148">
        <mark key="'" line="21" column="0" />
        <mark key="[" line="2" column="14" />
        <mark key="]" line="2" column="13" />
        <mark key="." line="2" column="13" />
        <mark key="^" line="2" column="13" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch_3.json" timestamp="1492678325641">
        <mark key="'" line="4983" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="48708" />
        <mark key="^" line="0" column="48708" />
        <mark key="." line="0" column="48708" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/UI/GameEditor/SaveButton.cs" timestamp="1498572998507">
        <mark key="'" line="74" column="42" />
        <mark key="[" line="74" column="42" />
        <mark key="]" line="74" column="50" />
        <mark key="." line="74" column="50" />
        <mark key="^" line="74" column="50" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/PuzzlePiece.cs" timestamp="1497973981788">
        <mark key="'" line="70" column="42" />
        <mark key="[" line="199" column="8" />
        <mark key="]" line="199" column="42" />
        <mark key="." line="199" column="42" />
        <mark key="^" line="199" column="42" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/public/js/angular/kuze_business_utils-v11.js" timestamp="1498391567633">
        <mark key="'" line="833" column="9" />
        <mark key="[" line="642" column="22" />
        <mark key="]" line="642" column="22" />
        <mark key="^" line="642" column="22" />
        <mark key="." line="642" column="22" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/angular/business_modal_client_payment.php" timestamp="1498395729099">
        <mark key="'" line="113" column="37" />
        <mark key="[" line="168" column="7" />
        <mark key="]" line="168" column="43" />
        <mark key="." line="168" column="43" />
        <mark key="^" line="168" column="43" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/public/js/angular/kuze_enduser_app.js" timestamp="1498045366621">
        <mark key="'" line="1187" column="20" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/db_scripts/2017_06_21_Business_invoices.sql" timestamp="1498744268397">
        <mark key="[" line="5" column="16" />
        <mark key="]" line="5" column="16" />
        <mark key="." line="5" column="16" />
        <mark key="^" line="6" column="30" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/api/invoices.php" timestamp="1498725747370">
        <mark key="'" line="95" column="4" />
        <mark key="[" line="7" column="6" />
        <mark key="]" line="7" column="6" />
        <mark key="." line="7" column="6" />
        <mark key="^" line="115" column="43" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/kuze_general_business_utils.php" timestamp="1498052689298">
        <mark key="'" line="129" column="24" />
        <mark key="[" line="129" column="30" />
        <mark key="]" line="129" column="30" />
        <mark key="." line="129" column="30" />
        <mark key="^" line="129" column="30" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/AndroidGalleryImageSaver.cs" timestamp="1497519923388">
        <mark key="'" line="31" column="0" />
        <mark key="[" line="15" column="0" />
        <mark key="]" line="15" column="0" />
        <mark key="^" line="15" column="16" />
        <mark key="." line="15" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/kuze_db.php" timestamp="1498728881689">
        <mark key="'" line="111" column="13" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/package.json" timestamp="1492003154014">
        <mark key="'" line="6" column="19" />
        <mark key="[" line="37" column="19" />
        <mark key="]" line="37" column="24" />
        <mark key="." line="37" column="24" />
        <mark key="^" line="37" column="24" />
      </file>
      <file name="$USER_HOME$/Projects/mocha-given/package.json" timestamp="1490283218372">
        <mark key="'" line="10" column="18" />
        <mark key="[" line="10" column="14" />
        <mark key="]" line="10" column="18" />
        <mark key="^" line="10" column="18" />
        <mark key="." line="10" column="18" />
      </file>
      <file name="$USER_HOME$/Projects/luftzig.com/front/src/Styling.elm" timestamp="1497700286779">
        <mark key="'" line="39" column="31" />
        <mark key="[" line="39" column="47" />
        <mark key="]" line="39" column="47" />
        <mark key="." line="39" column="47" />
        <mark key="^" line="39" column="47" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/angular/business_event_card.php" timestamp="1498032963100">
        <mark key="'" line="112" column="17" />
        <mark key="[" line="112" column="157" />
        <mark key="]" line="112" column="178" />
      </file>
      <file name="$USER_HOME$/Projects/luftzig.com/front/elm-stuff/packages/rtfeldman/elm-css/8.1.0/src/Css.elm" timestamp="1497694656695">
        <mark key="'" line="4371" column="8" />
      </file>
      <file name="$USER_HOME$/Projects/luftzig.com/front/src/View.elm" timestamp="1497799291882">
        <mark key="'" line="94" column="10" />
        <mark key="[" line="2" column="7" />
        <mark key="]" line="2" column="15" />
        <mark key="." line="2" column="15" />
        <mark key="^" line="2" column="15" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/StreamingAssets/stages.json" timestamp="1498668761069">
        <mark key="'" line="49" column="28" />
        <mark key="[" line="49" column="0" />
        <mark key="]" line="49" column="56" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/kuze_const.php" timestamp="1498044815249">
        <mark key="'" line="79" column="0" />
        <mark key="[" line="37" column="31" />
        <mark key="]" line="37" column="34" />
        <mark key="." line="37" column="34" />
        <mark key="^" line="37" column="34" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/public/js/angular/config-js.php" timestamp="1498387204283">
        <mark key="[" line="266" column="0" />
        <mark key="]" line="266" column="4" />
        <mark key="." line="266" column="4" />
        <mark key="^" line="111" column="0" />
      </file>
      <file name="vim_settings.xml" timestamp="1498470093079">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/site.conf" timestamp="1497783226999">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="39" column="0" />
        <mark key="." line="8" column="4" />
        <mark key="^" line="8" column="4" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" timestamp="1499153793615">
        <mark key="[" line="3" column="0" />
        <mark key="]" line="3" column="0" />
        <mark key="." line="3" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/angular/business_config.php" timestamp="1498044504233">
        <mark key="'" line="84" column="40" />
        <mark key="[" line="31" column="0" />
        <mark key="]" line="31" column="0" />
        <mark key="." line="31" column="0" />
        <mark key="^" line="109" column="210" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch_5.json" timestamp="1492685289704">
        <mark key="'" line="7" column="18" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="9003" />
        <mark key="^" line="0" column="9003" />
        <mark key="." line="0" column="9003" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/invoice/create-acc.php" timestamp="1498738780092">
        <mark key="[" line="10" column="0" />
        <mark key="]" line="26" column="48" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/PieceHex.cs" timestamp="1497973650339">
        <mark key="'" line="29" column="12" />
        <mark key="[" line="23" column="0" />
        <mark key="]" line="23" column="0" />
        <mark key="." line="23" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/luftzig.com/front/src/Main.elm" timestamp="1497695316614">
        <mark key="'" line="11" column="17" />
        <mark key="[" line="24" column="8" />
        <mark key="]" line="24" column="23" />
        <mark key="." line="24" column="23" />
        <mark key="^" line="24" column="23" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" timestamp="1499153782082">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="5861" column="0" />
        <mark key="." line="1925" column="48" />
        <mark key="^" line="1925" column="48" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/ImmortalManager.cs" timestamp="1498141711502">
        <mark key="'" line="123" column="73" />
        <mark key="[" line="127" column="67" />
        <mark key="]" line="127" column="70" />
        <mark key="^" line="127" column="70" />
        <mark key="." line="127" column="70" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/DataService/DataService.cs" timestamp="1498473617414">
        <mark key="'" line="16" column="24" />
        <mark key="[" line="38" column="54" />
        <mark key="]" line="38" column="54" />
        <mark key="^" line="38" column="56" />
        <mark key="." line="38" column="54" />
      </file>
      <file name="$USER_HOME$/Projects/the_bar_node/server/test/greeter-spec.ts" timestamp="1490284305782">
        <mark key="'" line="4" column="40" />
        <mark key="[" line="14" column="22" />
        <mark key="]" line="14" column="22" />
        <mark key="." line="14" column="22" />
        <mark key="^" line="12" column="37" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/updater/updater.model.ts" timestamp="1492787491819">
        <mark key="'" line="19" column="105" />
        <mark key="[" line="19" column="105" />
        <mark key="]" line="19" column="105" />
        <mark key="^" line="19" column="105" />
        <mark key="." line="19" column="105" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/DataService/StageData.cs" timestamp="1498123623435">
        <mark key="'" line="9" column="14" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch_6.json" timestamp="1492685876216">
        <mark key="'" line="452" column="0" />
        <mark key="[" line="517" column="35" />
        <mark key="]" line="517" column="33" />
        <mark key="^" line="517" column="33" />
        <mark key="." line="517" column="33" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/GardenScreenshot.cs" timestamp="1498662602044">
        <mark key="'" line="132" column="52" />
        <mark key="[" line="131" column="27" />
        <mark key="]" line="132" column="52" />
        <mark key="." line="132" column="52" />
        <mark key="^" line="132" column="52" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch_1.js" timestamp="1498387185354">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="38" column="0" />
        <mark key="]" line="195" column="1" />
        <mark key="^" line="195" column="1" />
        <mark key="." line="167" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/invoice/create-doc.php" timestamp="1498744316602">
        <mark key="'" line="147" column="0" />
        <mark key="[" line="64" column="0" />
        <mark key="]" line="133" column="1" />
        <mark key="." line="101" column="23" />
        <mark key="^" line="101" column="23" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/invoice/config.inc.php" timestamp="1498723747756">
        <mark key="[" line="3" column="0" />
        <mark key="]" line="8" column="18" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/appreciate-client/appreciate-client.ts" timestamp="1492789578918">
        <mark key="'" line="82" column="20" />
        <mark key="[" line="65" column="41" />
        <mark key="]" line="65" column="51" />
        <mark key="^" line="65" column="51" />
        <mark key="." line="65" column="51" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/appreciate-client/patch-request-converter.ts" timestamp="1492680861043">
        <mark key="'" line="64" column="0" />
        <mark key="[" line="65" column="25" />
        <mark key="]" line="65" column="31" />
        <mark key="^" line="65" column="31" />
        <mark key="." line="65" column="31" />
      </file>
      <file name="/dummy.sql" timestamp="1498743616409">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/UI/GameEditor/LoadButton.cs" timestamp="1498489326900">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="7" column="0" />
        <mark key="]" line="7" column="0" />
        <mark key="^" line="37" column="52" />
        <mark key="." line="7" column="0" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/consoles/db/6e25fe0b-98f3-46a4-9336-01e7aed49277/console.sql" timestamp="1498743593854">
        <mark key="[" line="0" column="63" />
        <mark key="]" line="0" column="81" />
        <mark key="." line="0" column="81" />
        <mark key="^" line="0" column="81" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/Borders.cs" timestamp="1497869872208">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="27" column="0" />
        <mark key="]" line="27" column="0" />
        <mark key="^" line="14" column="49" />
        <mark key="." line="27" column="0" />
      </file>
      <file name="/Dummy.txt" timestamp="1498748537892">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/luftzig.com/front/src/Sections/CodeSection.elm" timestamp="1497799548443">
        <mark key="'" line="39" column="20" />
        <mark key="[" line="22" column="21" />
        <mark key="]" line="22" column="20" />
        <mark key="." line="22" column="20" />
        <mark key="^" line="22" column="20" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" timestamp="1498746722575">
        <mark key="'" line="9" column="26" />
        <mark key="[" line="9" column="26" />
        <mark key="]" line="9" column="57" />
        <mark key="^" line="8" column="23" />
        <mark key="." line="8" column="23" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/DragAndDrop.cs" timestamp="1497973668942">
        <mark key="'" line="34" column="14" />
        <mark key="[" line="47" column="0" />
        <mark key="]" line="54" column="4" />
        <mark key="." line="19" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/kuze_login.php" timestamp="1497776244958">
        <mark key="'" line="43" column="8" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch_1.json" timestamp="1492339311193">
        <mark key="'" line="2669" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="2669" column="0" />
        <mark key="^" line="0" column="31135" />
        <mark key="." line="0" column="31135" />
      </file>
    </filemarks>
    <jumps>
      <jump line="260" column="28" filename="$USER_HOME$/Projects/zengarden/Assets/StreamingAssets/stages.json" />
      <jump line="74" column="42" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/UI/GameEditor/SaveButton.cs" />
      <jump line="80" column="36" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/PieceGenerator.cs" />
      <jump line="160" column="25" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/PieceGenerator.cs" />
      <jump line="42" column="62" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/PieceGenerator.cs" />
      <jump line="24" column="51" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/UI/GameEditor/ShareGardenButton.cs" />
      <jump line="179" column="48" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/GardenScreenshot.cs" />
      <jump line="185" column="37" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/GardenScreenshot.cs" />
      <jump line="72" column="26" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/GardenScreenshot.cs" />
      <jump line="175" column="8" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/GardenScreenshot.cs" />
      <jump line="1" column="0" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/GardenScreenshot.cs" />
      <jump line="177" column="8" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/GardenScreenshot.cs" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/GardenScreenshot.cs" />
      <jump line="89" column="4" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/GardenScreenshot.cs" />
      <jump line="30" column="8" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/GardenScreenshot.cs" />
      <jump line="103" column="0" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/GardenScreenshot.cs" />
      <jump line="161" column="8" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/GardenScreenshot.cs" />
      <jump line="119" column="8" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/GardenScreenshot.cs" />
      <jump line="132" column="52" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/GardenScreenshot.cs" />
      <jump line="54" column="62" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/PieceGenerator.cs" />
      <jump line="44" column="50" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/PieceGenerator.cs" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/PieceGenerator.cs" />
      <jump line="568" column="20" filename="$USER_HOME$/Projects/zengarden/Assets/StreamingAssets/stages.json" />
      <jump line="56" column="38" filename="$USER_HOME$/Projects/zengarden/Assets/StreamingAssets/stages.json" />
      <jump line="3303" column="38" filename="$USER_HOME$/Projects/zengarden/Assets/StreamingAssets/stages.json" />
      <jump line="3296" column="38" filename="$USER_HOME$/Projects/zengarden/Assets/StreamingAssets/stages.json" />
      <jump line="3281" column="38" filename="$USER_HOME$/Projects/zengarden/Assets/StreamingAssets/stages.json" />
      <jump line="3274" column="38" filename="$USER_HOME$/Projects/zengarden/Assets/StreamingAssets/stages.json" />
      <jump line="3259" column="38" filename="$USER_HOME$/Projects/zengarden/Assets/StreamingAssets/stages.json" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/zengarden/Assets/StreamingAssets/stages.json" />
      <jump line="49" column="28" filename="$USER_HOME$/Projects/zengarden/Assets/StreamingAssets/stages.json" />
      <jump line="145" column="23" filename="$USER_HOME$/Projects/kuze/php/invoice/create-doc.php" />
      <jump line="16" column="0" filename="$USER_HOME$/Projects/kuze/php/invoice/create-doc.php" />
      <jump line="68" column="0" filename="$USER_HOME$/Projects/kuze/php/invoice/create-doc.php" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/kuze/php/invoice/create-doc.php" />
      <jump line="76" column="4" filename="$USER_HOME$/Projects/kuze/php/invoice/create-doc.php" />
      <jump line="3" column="25" filename="$USER_HOME$/Projects/kuze/php/api/invoices.php" />
      <jump line="6" column="0" filename="$USER_HOME$/Projects/kuze/php/invoice/create-doc.php" />
      <jump line="64" column="0" filename="$USER_HOME$/Projects/kuze/php/invoice/create-doc.php" />
      <jump line="91" column="4" filename="$USER_HOME$/Projects/kuze/php/api/invoices.php" />
      <jump line="40" column="0" filename="$USER_HOME$/Projects/kuze/php/invoice/create-doc2.php" />
      <jump line="88" column="4" filename="$USER_HOME$/Projects/kuze/php/invoice/create-doc2.php" />
      <jump line="10" column="0" filename="$USER_HOME$/Projects/kuze/php/invoice/create-doc2.php" />
      <jump line="2903" column="32" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="2904" column="38" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="2913" column="47" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="2916" column="66" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="292" column="74" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="16" column="36" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="522" column="22" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="154" column="32" filename="$USER_HOME$/Projects/kuze/php/kuze_db.php" />
      <jump line="111" column="13" filename="$USER_HOME$/Projects/kuze/php/kuze_db.php" />
      <jump line="18" column="32" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="19" column="29" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="0" column="0" filename="$APPLICATION_CONFIG_DIR$/consoles/db/6e25fe0b-98f3-46a4-9336-01e7aed49277/console.sql" />
      <jump line="107" column="6" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="101" column="5" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="7" column="0" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="59" column="8" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="2914" column="29" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="2915" column="45" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="2923" column="13" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="2925" column="2" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="100" column="46" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="1951" column="27" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="126" column="21" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="22" column="0" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="1963" column="36" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="2929" column="29" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="111" column="37" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="147" column="0" filename="$USER_HOME$/Projects/kuze/php/invoice/create-doc.php" />
      <jump line="371" column="25" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="381" column="34" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="383" column="30" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="391" column="35" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="393" column="25" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="395" column="24" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="402" column="43" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="404" column="34" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="406" column="33" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="413" column="34" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="433" column="32" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="437" column="8" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="439" column="32" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="445" column="8" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="450" column="32" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="459" column="12" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="460" column="36" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="465" column="10" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="466" column="34" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="470" column="10" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="471" column="34" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="21" column="51" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="149" column="40" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="137" column="0" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="8" column="24" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="9" column="26" filename="$USER_HOME$/Projects/kuze/php/api/linetInvoice.php" />
      <jump line="5570" column="21" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
    </jumps>
    <registers>
      <register name="&quot;" type="2">
        <text encoding="base64">PD9waHAgaW5jbHVkZSAnYnVzaW5lc3MtYXBwLXYxMS5qcycKPz4K</text>
      </register>
      <register name="-" type="4">
        <text>/receipt</text>
      </register>
      <register name="/" type="4">
        <text>\cUser</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">PD9waHAgaW5jbHVkZSAnYnVzaW5lc3MtYXBwLXYxMS5qcycKPz4K</text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">ICAgIGt1emVfdXRpbHM6OmxvZ0RlYnVnKCJVc2VyIGVtYWlsOiAkZW1haWwiKTsK</text>
      </register>
      <register name="r" type="4">
        <keys>
          <key char="64" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="123" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="121" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="65" code="0" mods="0" />
          <key char="44" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="44" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="109" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="34" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="65" code="0" mods="0" />
          <key char="34" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="65" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="125" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="97" code="0" mods="0" />
          <key char="44" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="48" code="0" mods="0" />
        </keys>
      </register>
      <register name="3" type="2">
        <text encoding="base64">ICAgIAo=</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICAgIGlmICghJGJ1c2luZXNzX2RldGFpbHNbJ2ludm9pY2Vfc3lzdGVtX2FjY291bnRfaWQnXSkgewogICAgICByZXR1cm4gIiI7CiAgICB9Cg==</text>
      </register>
      <register name="t" type="4">
        <keys>
          <key char="119" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="123" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="65" code="0" mods="0" />
          <key char="44" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="109" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="34" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="65" code="0" mods="0" />
          <key char="34" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="111" code="0" mods="0" />
          <key char="125" code="0" mods="0" />
          <key char="44" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="48" code="0" mods="0" />
        </keys>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICAgIGt1emVfdXRpbHM6OmxvZ0RlYnVnKCJBY2NvdW50IGlkIGlzIG5vdyAiIC4gZ2V0dHlwZSgkaW52b2ljZV9kYXRhWydhY2NvdW50X2lkJ10pIC4gIiB2YWx1ZSAke2ludm9pY2VfZGF0YVsnYWNjb3VudF9pZCddfSIpOwo=</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAgIGlmICghKQo=</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">ICAgICAga3V6ZV91dGlsczo6bG9nRGVidWcoIkxpbmV0IC9hcGkvY3JlYXRlL2FjY291bnQgcmVzdWx0OiAiIC4gJGludm9pY2VfcmVzdWx0Wydib2R5J11bJ2lkJ10pOwo=</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">ICAgIGt1emVfdXRpbHM6OmxvZ0RlYnVnKCJTZW5kaW5nIHJlcXVlc3QgdG8gIiAuICRsaW5ldF91cmwpOwo=</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">QUxURVIgVEFCTEUga3pfYnVzaW5lc3NlcyBBREQgKAogIGludm9pY2Vfc3lzdGVtX2FjY291bnRfaWQgSU5UCiAgKTsK</text>
      </register>
      <register name=":" type="4">
        <text>%s/&quot;yPos&quot;: 0.20000000298023225/&quot;yPos&quot;: 0.1/</text>
      </register>
    </registers>
    <search>
      <last-search>\cUser</last-search>
      <last-offset />
      <last-pattern>\cUser</last-pattern>
      <last-replace>&quot;yPos&quot;: 0.1</last-replace>
      <last-substitute>&quot;yPos&quot;: 0.20000000298023225</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">IFwu</entry>
        <entry encoding="base64">ID0uKiQ=</entry>
        <entry encoding="base64">IHx8IG51bGw=</entry>
        <entry encoding="base64">LCA=</entry>
        <entry encoding="base64">IFwuIA==</entry>
        <entry>&quot;&quot;</entry>
        <entry>,</entry>
        <entry>'</entry>
        <entry>payment</entry>
        <entry>credit_card_type</entry>
        <entry>console.log</entry>
        <entry>cliend</entry>
        <entry>thedata</entry>
        <entry>Clliend</entry>
        <entry>Business</entry>
        <entry>paymentMethods</entry>
        <entry>business</entry>
        <entry>admin</entry>
        <entry>\/business_config</entry>
        <entry>\cUser</entry>
      </history-search>
      <history-cmd>
        <entry encoding="base64">JzwsJz5zLzsvJ107Lw==</entry>
        <entry>s/, /\r/g</entry>
        <entry>s/, /,\r/g</entry>
        <entry>Reg</entry>
        <entry>reg</entry>
        <entry encoding="base64">JzwsJz5zL1wkLy9n</entry>
        <entry encoding="base64">JzwsJz5zLywkLyAuICIsIi8=</entry>
        <entry encoding="base64">JzwsJz5zLywkLyAuICIsIiAuLw==</entry>
        <entry encoding="base64">JzwsJz5zL1xFLykv</entry>
        <entry encoding="base64">JzwsJz5zL1w+Lykv</entry>
        <entry encoding="base64">JzwsJz5zLyAuLykgLi8=</entry>
        <entry encoding="base64">JzwsJz5zLyBcLi8pIC4v</entry>
        <entry encoding="base64">JzwsJz5zLyA9LiokLywv</entry>
        <entry encoding="base64">JzwsJz5zLyB8fCBudWxsLy8=</entry>
        <entry encoding="base64">JzwsJz5zLywgLywiIC4gIi8=</entry>
        <entry encoding="base64">JzwsJz5zLywgLywiIC4gIi9n</entry>
        <entry encoding="base64">JzwsJz5zLyBcLiAvIC5cci9n</entry>
        <entry encoding="base64">JzwsJz5zLyIiLyInJyIv</entry>
        <entry encoding="base64">JzwsJz5zLywvJywv</entry>
        <entry encoding="base64">JzwsJz5zLycvLw==</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed OPEN_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>shift ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed CLOSE_BRACKET</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>
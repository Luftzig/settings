<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/Decoration.cs" timestamp="1497974348932">
        <mark key="'" line="59" column="96" />
        <mark key="[" line="49" column="5" />
        <mark key="]" line="50" column="76" />
        <mark key="^" line="50" column="76" />
        <mark key="." line="50" column="76" />
      </file>
      <file name="$USER_HOME$/Projects/mocha-given/index.d.ts" timestamp="1490284104781">
        <mark key="'" line="1" column="0" />
        <mark key="[" line="11" column="0" />
        <mark key="]" line="11" column="0" />
        <mark key="." line="11" column="0" />
        <mark key="^" line="1" column="11" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch_2.json" timestamp="1492339330086">
        <mark key="[" line="3" column="0" />
        <mark key="]" line="3" column="0" />
        <mark key="." line="3" column="0" />
      </file>
      <file name="/a.dummy" timestamp="1497520323357">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/CameraMovement.cs" timestamp="1497450852828">
        <mark key="'" line="193" column="4" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/UI/ExitToast.cs" timestamp="1497532567374">
        <mark key="'" line="40" column="0" />
        <mark key="[" line="2" column="0" />
        <mark key="]" line="2" column="0" />
        <mark key="." line="2" column="0" />
        <mark key="^" line="10" column="9" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/PieceGenerator.cs" timestamp="1497881338401">
        <mark key="'" line="158" column="26" />
        <mark key="[" line="107" column="28" />
        <mark key="]" line="107" column="37" />
        <mark key="." line="107" column="37" />
        <mark key="^" line="107" column="37" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch.json" timestamp="1492339698148">
        <mark key="'" line="21" column="0" />
        <mark key="[" line="2" column="14" />
        <mark key="]" line="2" column="13" />
        <mark key="." line="2" column="13" />
        <mark key="^" line="2" column="13" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch_3.json" timestamp="1492678325641">
        <mark key="'" line="4983" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="48708" />
        <mark key="^" line="0" column="48708" />
        <mark key="." line="0" column="48708" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/UI/GameEditor/SaveButton.cs" timestamp="1497883434954">
        <mark key="'" line="70" column="26" />
        <mark key="[" line="53" column="102" />
        <mark key="]" line="53" column="105" />
        <mark key="." line="53" column="105" />
        <mark key="^" line="53" column="105" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/PuzzlePiece.cs" timestamp="1497973981788">
        <mark key="'" line="70" column="42" />
        <mark key="[" line="199" column="8" />
        <mark key="]" line="199" column="42" />
        <mark key="." line="199" column="42" />
        <mark key="^" line="199" column="42" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/config/environment/production.ts" timestamp="1492787130440">
        <mark key="[" line="11" column="26" />
        <mark key="]" line="11" column="26" />
        <mark key="." line="11" column="34" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/public/js/angular/kuze_business_utils-v11.js" timestamp="1498380813341">
        <mark key="'" line="833" column="9" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/config/environment/development.ts" timestamp="1492787124254">
        <mark key="[" line="9" column="26" />
        <mark key="]" line="9" column="34" />
        <mark key="." line="9" column="34" />
        <mark key="^" line="9" column="34" />
      </file>
      <file name="$USER_HOME$/Projects/luftzig.com/front/src/Sections/WhoAmI.elm" timestamp="1497690707700">
        <mark key="[" line="5" column="32" />
        <mark key="]" line="5" column="35" />
        <mark key="^" line="5" column="34" />
        <mark key="." line="5" column="35" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/angular/business_modal_client_payment.php" timestamp="1498381358793">
        <mark key="'" line="44" column="41" />
        <mark key="[" line="68" column="10" />
        <mark key="]" line="65" column="64" />
        <mark key="." line="65" column="64" />
        <mark key="^" line="65" column="64" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/db_scripts/2017_06_21_Business_invoices.sql" timestamp="1498380038149">
        <mark key="[" line="19" column="77" />
        <mark key="]" line="19" column="0" />
        <mark key="." line="19" column="0" />
        <mark key="^" line="19" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/.gitignore" timestamp="1497785206525">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="1" column="7" />
        <mark key="^" line="1" column="7" />
        <mark key="." line="1" column="7" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/AndroidGalleryImageSaver.cs" timestamp="1497519923388">
        <mark key="'" line="31" column="0" />
        <mark key="[" line="15" column="0" />
        <mark key="]" line="15" column="0" />
        <mark key="^" line="15" column="16" />
        <mark key="." line="15" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/kuze_payment_utils.php" timestamp="1498052001162">
        <mark key="'" line="182" column="34" />
        <mark key="[" line="56" column="96" />
        <mark key="]" line="57" column="36" />
        <mark key="^" line="57" column="36" />
        <mark key="." line="57" column="36" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/kuze_config/dev/kuze_config.php" timestamp="1497781648229">
        <mark key="[" line="43" column="0" />
        <mark key="]" line="48" column="37" />
        <mark key="." line="47" column="31" />
        <mark key="^" line="47" column="31" />
      </file>
      <file name="$USER_HOME$/Projects/luftzig.com/front/src/Styling.elm" timestamp="1497700286779">
        <mark key="'" line="39" column="31" />
        <mark key="[" line="39" column="47" />
        <mark key="]" line="39" column="47" />
        <mark key="." line="39" column="47" />
        <mark key="^" line="39" column="47" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php.ini" timestamp="1497781365670">
        <mark key="[" line="0" column="24" />
        <mark key="]" line="0" column="23" />
        <mark key="^" line="0" column="23" />
        <mark key="." line="0" column="23" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/angular/business_event_card.php" timestamp="1498032963100">
        <mark key="'" line="112" column="17" />
        <mark key="[" line="112" column="157" />
        <mark key="]" line="112" column="178" />
      </file>
      <file name="$USER_HOME$/Projects/luftzig.com/front/elm-stuff/packages/rtfeldman/elm-css/8.1.0/src/Css.elm" timestamp="1497694656695">
        <mark key="'" line="4371" column="8" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/kuze_const.php" timestamp="1498044815249">
        <mark key="'" line="79" column="0" />
        <mark key="[" line="37" column="31" />
        <mark key="]" line="37" column="34" />
        <mark key="." line="37" column="34" />
        <mark key="^" line="37" column="34" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/gulpfile.js" timestamp="1491404784596">
        <mark key="[" line="25" column="25" />
        <mark key="]" line="25" column="41" />
        <mark key="^" line="25" column="41" />
        <mark key="." line="25" column="41" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/angular/business_config.php" timestamp="1498044504233">
        <mark key="'" line="84" column="40" />
        <mark key="[" line="31" column="0" />
        <mark key="]" line="31" column="0" />
        <mark key="." line="31" column="0" />
        <mark key="^" line="109" column="210" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/campaigns-view/campaign.model.ts" timestamp="1492790714937">
        <mark key="[" line="19" column="22" />
        <mark key="]" line="19" column="31" />
        <mark key="^" line="19" column="31" />
        <mark key="." line="19" column="31" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/PieceHex.cs" timestamp="1497973650339">
        <mark key="'" line="29" column="12" />
        <mark key="[" line="23" column="0" />
        <mark key="]" line="23" column="0" />
        <mark key="." line="23" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/luftzig.com/front/src/Main.elm" timestamp="1497695316614">
        <mark key="'" line="11" column="17" />
        <mark key="[" line="24" column="8" />
        <mark key="]" line="24" column="23" />
        <mark key="." line="24" column="23" />
        <mark key="^" line="24" column="23" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/src/index.ts" timestamp="1491408128292">
        <mark key="[" line="5" column="1" />
        <mark key="]" line="5" column="1" />
        <mark key="." line="5" column="1" />
        <mark key="^" line="5" column="1" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/updater/updater.model.ts" timestamp="1492787491819">
        <mark key="'" line="19" column="105" />
        <mark key="[" line="19" column="105" />
        <mark key="]" line="19" column="105" />
        <mark key="^" line="19" column="105" />
        <mark key="." line="19" column="105" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/appreciate-client/CampaignPatch.ts" timestamp="1492686242202">
        <mark key="[" line="4" column="14" />
        <mark key="]" line="4" column="26" />
        <mark key="." line="4" column="26" />
        <mark key="^" line="4" column="26" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/docker-compose.yml" timestamp="1497790359903">
        <mark key="[" line="20" column="15" />
        <mark key="]" line="20" column="17" />
        <mark key="." line="20" column="17" />
        <mark key="^" line="20" column="17" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/GardenScreenshot.cs" timestamp="1497536741022">
        <mark key="'" line="171" column="8" />
        <mark key="[" line="175" column="39" />
        <mark key="]" line="175" column="49" />
        <mark key="." line="175" column="49" />
        <mark key="^" line="175" column="49" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/src/page.ts" timestamp="1491408215088">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="2" column="1" />
        <mark key="^" line="2" column="1" />
        <mark key="." line="2" column="1" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/appreciate-client/appreciate-client.ts" timestamp="1492789578918">
        <mark key="'" line="82" column="20" />
        <mark key="[" line="65" column="41" />
        <mark key="]" line="65" column="51" />
        <mark key="^" line="65" column="51" />
        <mark key="." line="65" column="51" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/appreciate-client/patch-request-converter.ts" timestamp="1492680861043">
        <mark key="'" line="64" column="0" />
        <mark key="[" line="65" column="25" />
        <mark key="]" line="65" column="31" />
        <mark key="^" line="65" column="31" />
        <mark key="." line="65" column="31" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/appreciate-client/campaign.model.ts" timestamp="1492786547226">
        <mark key="[" line="21" column="43" />
        <mark key="]" line="21" column="58" />
        <mark key="." line="21" column="58" />
        <mark key="^" line="21" column="58" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/consoles/db/6e25fe0b-98f3-46a4-9336-01e7aed49277/console.sql" timestamp="1498052057448">
        <mark key="[" line="0" column="28" />
        <mark key="]" line="0" column="27" />
        <mark key="." line="0" column="27" />
        <mark key="^" line="0" column="27" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/appreciate-client/Campaign.ts" timestamp="1492339605604">
        <mark key="[" line="3" column="17" />
        <mark key="]" line="4" column="21" />
        <mark key="^" line="4" column="21" />
        <mark key="." line="4" column="21" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/UI/SavedImageToast.cs" timestamp="1497521665292">
        <mark key="[" line="17" column="9" />
        <mark key="]" line="21" column="22" />
        <mark key="." line="21" column="22" />
        <mark key="^" line="21" column="22" />
      </file>
      <file name="$USER_HOME$/Projects/the_bar_node/server/.gitignore" timestamp="1490277634801">
        <mark key="[" line="4" column="6" />
        <mark key="]" line="5" column="7" />
        <mark key="^" line="5" column="7" />
        <mark key="." line="5" column="7" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/DragAndDrop.cs" timestamp="1497973668942">
        <mark key="'" line="34" column="14" />
        <mark key="[" line="47" column="0" />
        <mark key="]" line="54" column="4" />
        <mark key="." line="19" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/src/main.js.ts" timestamp="1491408186798">
        <mark key="[" line="4" column="0" />
        <mark key="]" line="4" column="4" />
        <mark key="^" line="4" column="4" />
        <mark key="." line="4" column="4" />
      </file>
      <file name="$USER_HOME$/Projects/luftzig.com/front/.gitignore" timestamp="1497188838530">
        <mark key="[" line="1" column="6" />
        <mark key="]" line="2" column="0" />
        <mark key="^" line="2" column="0" />
        <mark key="." line="2" column="0" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch_1.json" timestamp="1492339311193">
        <mark key="'" line="2669" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="2669" column="0" />
        <mark key="^" line="0" column="31135" />
        <mark key="." line="0" column="31135" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/webpack.js" timestamp="1491407163613">
        <mark key="[" line="17" column="19" />
        <mark key="]" line="17" column="25" />
        <mark key="." line="17" column="25" />
        <mark key="^" line="17" column="25" />
      </file>
      <file name="$USER_HOME$/Projects/luftzig.com/front/src/Sections/Main.elm" timestamp="1497264215848">
        <mark key="[" line="2" column="0" />
        <mark key="]" line="2" column="0" />
        <mark key="^" line="2" column="25" />
        <mark key="." line="2" column="0" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch_4.json" timestamp="1492678382301">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="107" column="0" />
        <mark key="^" line="107" column="0" />
        <mark key="." line="107" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/phpold/kuze_utils.php" timestamp="1497784331390">
        <mark key="'" line="59" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/webpack.config.js" timestamp="1491408271452">
        <mark key="[" line="13" column="12" />
        <mark key="]" line="13" column="13" />
        <mark key="^" line="13" column="13" />
        <mark key="." line="13" column="13" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/updater/updater.helpers.ts" timestamp="1492791203674">
        <mark key="'" line="25" column="36" />
        <mark key="[" line="33" column="48" />
        <mark key="]" line="34" column="24" />
        <mark key="." line="34" column="24" />
        <mark key="^" line="34" column="24" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/UI/GameEditor/ShareGardenButton.cs" timestamp="1497533996458">
        <mark key="'" line="24" column="51" />
        <mark key="[" line="29" column="0" />
        <mark key="]" line="29" column="36" />
        <mark key="." line="29" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/routes/index.ts" timestamp="1491406948665">
        <mark key="[" line="2" column="0" />
        <mark key="]" line="2" column="0" />
        <mark key="." line="2" column="4" />
        <mark key="^" line="1" column="4" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch.js" timestamp="1498046463701">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/public/js/angular/kuze_enduser_app.js" timestamp="1498045366621">
        <mark key="'" line="1187" column="20" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/kuze_general_business_utils.php" timestamp="1498052689298">
        <mark key="'" line="129" column="24" />
        <mark key="[" line="129" column="30" />
        <mark key="]" line="129" column="30" />
        <mark key="." line="129" column="30" />
        <mark key="^" line="129" column="30" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/docker-compose.yml" timestamp="1492784969603">
        <mark key="[" line="28" column="17" />
        <mark key="]" line="28" column="19" />
        <mark key="." line="28" column="19" />
        <mark key="^" line="28" column="19" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/package.json" timestamp="1492003154014">
        <mark key="'" line="6" column="19" />
        <mark key="[" line="37" column="19" />
        <mark key="]" line="37" column="24" />
        <mark key="." line="37" column="24" />
        <mark key="^" line="37" column="24" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/app.ts" timestamp="1491984160678">
        <mark key="[" line="15" column="0" />
        <mark key="]" line="15" column="0" />
        <mark key="." line="15" column="0" />
        <mark key="^" line="7" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/appreciate-client/budget-line.ts" timestamp="1492338169256">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="21" />
        <mark key="^" line="0" column="21" />
        <mark key="." line="0" column="21" />
      </file>
      <file name="$USER_HOME$/Projects/mocha-given/package.json" timestamp="1490283218372">
        <mark key="'" line="10" column="18" />
        <mark key="[" line="10" column="14" />
        <mark key="]" line="10" column="18" />
        <mark key="^" line="10" column="18" />
        <mark key="." line="10" column="18" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/Dockerfile" timestamp="1498035272323">
        <mark key="[" line="0" column="9" />
        <mark key="]" line="0" column="11" />
        <mark key="^" line="0" column="11" />
        <mark key="." line="0" column="11" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/campaigns-view/campaign.view.ts" timestamp="1492787095058">
        <mark key="[" line="8" column="17" />
        <mark key="]" line="9" column="53" />
        <mark key="." line="9" column="53" />
        <mark key="^" line="9" column="53" />
      </file>
      <file name="$USER_HOME$/Projects/luftzig.com/front/src/View.elm" timestamp="1497799291882">
        <mark key="'" line="94" column="10" />
        <mark key="[" line="2" column="7" />
        <mark key="]" line="2" column="15" />
        <mark key="." line="2" column="15" />
        <mark key="^" line="2" column="15" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/api/api_admin.php" timestamp="1498379736606">
        <mark key="'" line="2895" column="30" />
        <mark key="[" line="2867" column="0" />
        <mark key="]" line="2867" column="0" />
        <mark key="." line="2867" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/kuze_utils.php" timestamp="1498033498892">
        <mark key="'" line="709" column="39" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/site.conf" timestamp="1497783226999">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="39" column="0" />
        <mark key="." line="8" column="4" />
        <mark key="^" line="8" column="4" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" timestamp="1498380493826">
        <mark key="[" line="5" column="0" />
        <mark key="]" line="5" column="0" />
        <mark key="^" line="4" column="0" />
        <mark key="." line="5" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/the_bar_node/server/package.json" timestamp="1490283423008">
        <mark key="[" line="19" column="51" />
        <mark key="]" line="19" column="82" />
        <mark key="^" line="19" column="82" />
        <mark key="." line="19" column="82" />
      </file>
      <file name="$USER_HOME$/Projects/the_bar_node/server/vendors.d.ts" timestamp="1490281242449">
        <mark key="[" line="0" column="20" />
        <mark key="]" line="0" column="20" />
        <mark key="." line="0" column="20" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch_5.json" timestamp="1492685289704">
        <mark key="'" line="7" column="18" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="9003" />
        <mark key="^" line="0" column="9003" />
        <mark key="." line="0" column="9003" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/appreciate-client/BudgetLine.ts" timestamp="1492339590331">
        <mark key="[" line="9" column="17" />
        <mark key="]" line="9" column="21" />
        <mark key="^" line="9" column="21" />
        <mark key="." line="9" column="21" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/UI/ToastBase.cs" timestamp="1497521492534">
        <mark key="[" line="8" column="4" />
        <mark key="]" line="8" column="9" />
        <mark key="." line="8" column="9" />
        <mark key="^" line="8" column="9" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" timestamp="1498381037924">
        <mark key="'" line="1839" column="9" />
        <mark key="[" line="1856" column="0" />
        <mark key="]" line="1856" column="0" />
        <mark key="." line="1856" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/the_bar_node/server/test/greeter-spec.ts" timestamp="1490284305782">
        <mark key="'" line="4" column="40" />
        <mark key="[" line="14" column="22" />
        <mark key="]" line="14" column="22" />
        <mark key="." line="14" column="22" />
        <mark key="^" line="12" column="37" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/view/view.spec.ts" timestamp="1491985147360">
        <mark key="[" line="2" column="0" />
        <mark key="]" line="2" column="0" />
        <mark key="." line="2" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/tsconfig.json" timestamp="1492002963211">
        <mark key="[" line="11" column="7" />
        <mark key="]" line="11" column="8" />
        <mark key="." line="11" column="8" />
        <mark key="^" line="11" column="8" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch_6.json" timestamp="1492685876216">
        <mark key="'" line="452" column="0" />
        <mark key="[" line="517" column="35" />
        <mark key="]" line="517" column="33" />
        <mark key="^" line="517" column="33" />
        <mark key="." line="517" column="33" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/test.php" timestamp="1497784041419">
        <mark key="[" line="125" column="25" />
        <mark key="]" line="125" column="25" />
        <mark key="^" line="125" column="25" />
        <mark key="." line="125" column="25" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/api/appreciate-client/appreciate.exploratory.spec.ts" timestamp="1492003635975">
        <mark key="[" line="9" column="50" />
        <mark key="]" line="9" column="48" />
        <mark key="." line="9" column="48" />
        <mark key="^" line="9" column="48" />
      </file>
      <file name="/dummy.sql" timestamp="1498380990363">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/Dockerfile" timestamp="1491980582122">
        <mark key="[" line="0" column="23" />
        <mark key="]" line="0" column="25" />
        <mark key="." line="0" column="25" />
        <mark key="^" line="0" column="25" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/Borders.cs" timestamp="1497869872208">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="27" column="0" />
        <mark key="]" line="27" column="0" />
        <mark key="^" line="14" column="49" />
        <mark key="." line="27" column="0" />
      </file>
      <file name="/Dummy.txt" timestamp="1498053031083">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/luftzig.com/front/src/Model.elm" timestamp="1497692129327">
        <mark key="[" line="8" column="15" />
        <mark key="]" line="9" column="15" />
        <mark key="." line="9" column="15" />
        <mark key="^" line="9" column="15" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch.ts" timestamp="1492330300404">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="172" />
        <mark key="." line="0" column="119" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/docker-compose.yaml" timestamp="1497774333361">
        <mark key="[" line="16" column="8" />
        <mark key="]" line="16" column="8" />
        <mark key="^" line="16" column="8" />
        <mark key="." line="16" column="8" />
      </file>
      <file name="$USER_HOME$/Projects/luftzig.com/front/src/Sections/CodeSection.elm" timestamp="1497799548443">
        <mark key="'" line="39" column="20" />
        <mark key="[" line="22" column="21" />
        <mark key="]" line="22" column="20" />
        <mark key="." line="22" column="20" />
        <mark key="^" line="22" column="20" />
      </file>
      <file name="$USER_HOME$/Projects/zengarden/Assets/Scripts/Helpers.cs" timestamp="1497867695982">
        <mark key="[" line="17" column="51" />
        <mark key="]" line="17" column="57" />
        <mark key="^" line="17" column="57" />
        <mark key="." line="17" column="57" />
      </file>
      <file name="$USER_HOME$/Projects/the_bar_node/server/tsconfig.json" timestamp="1490282855133">
        <mark key="[" line="11" column="6" />
        <mark key="]" line="11" column="4" />
        <mark key="." line="11" column="4" />
        <mark key="^" line="11" column="4" />
      </file>
      <file name="$USER_HOME$/Projects/kuze/php/kuze_login.php" timestamp="1497776244958">
        <mark key="'" line="43" column="8" />
      </file>
      <file name="$USER_HOME$/Projects/Guy Prives/Automator/server/.gitignore" timestamp="1491647826020">
        <mark key="[" line="2" column="5" />
        <mark key="]" line="3" column="5" />
        <mark key="^" line="3" column="5" />
        <mark key="." line="3" column="5" />
      </file>
      <file name="$USER_HOME$/Projects/luftzig.com/gae/app.yaml" timestamp="1497701788499">
        <mark key="[" line="11" column="16" />
        <mark key="]" line="11" column="17" />
        <mark key="." line="11" column="17" />
      </file>
      <file name="$USER_HOME$/Projects/the_bar_node/server/node_modules/mocha-given/mocha-given.d.ts" timestamp="1490283175399">
        <mark key="[" line="6" column="2" />
        <mark key="]" line="6" column="2" />
        <mark key="^" line="1" column="7" />
        <mark key="." line="6" column="2" />
      </file>
    </filemarks>
    <jumps>
      <jump line="22" column="11" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/Decoration.cs" />
      <jump line="158" column="26" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/PieceGenerator.cs" />
      <jump line="52" column="24" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/UI/GameEditor/SaveButton.cs" />
      <jump line="51" column="36" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/UI/GameEditor/SaveButton.cs" />
      <jump line="64" column="36" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/UI/GameEditor/SaveButton.cs" />
      <jump line="70" column="26" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/UI/GameEditor/SaveButton.cs" />
      <jump line="7" column="23" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/Decoration.cs" />
      <jump line="59" column="15" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/Decoration.cs" />
      <jump line="65" column="11" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/Decoration.cs" />
      <jump line="56" column="96" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/Decoration.cs" />
      <jump line="29" column="12" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/PieceHex.cs" />
      <jump line="34" column="14" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/DragAndDrop.cs" />
      <jump line="70" column="42" filename="$USER_HOME$/Projects/zengarden/Assets/Scripts/Game/PuzzlePiece.cs" />
      <jump line="95" column="0" filename="$USER_HOME$/Projects/kuze/php/angular/business_event_card.php" />
      <jump line="80" column="129" filename="$USER_HOME$/Projects/kuze/php/angular/business_config.php" />
      <jump line="42" column="0" filename="$USER_HOME$/Projects/kuze/php/angular/business_event_card.php" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/kuze/php/angular/business_event_card.php" />
      <jump line="257" column="0" filename="$USER_HOME$/Projects/kuze/php/angular/business_event_card.php" />
      <jump line="141" column="18" filename="$USER_HOME$/Projects/kuze/php/angular/business_event_card.php" />
      <jump line="112" column="17" filename="$USER_HOME$/Projects/kuze/php/angular/business_event_card.php" />
      <jump line="3874" column="8" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="15" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="5522" column="27" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="5837" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="3" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="86" column="33" filename="$USER_HOME$/Projects/kuze/php/angular/business_config.php" />
      <jump line="3" column="41" filename="$USER_HOME$/Projects/kuze/php/angular/business_config.php" />
      <jump line="2" column="41" filename="$USER_HOME$/Projects/kuze/php/angular/business_config.php" />
      <jump line="709" column="39" filename="$USER_HOME$/Projects/kuze/php/kuze_utils.php" />
      <jump line="2" column="0" filename="$USER_HOME$/Projects/kuze/php/kuze_const.php" />
      <jump line="71" column="0" filename="$USER_HOME$/Projects/kuze/php/kuze_const.php" />
      <jump line="336" column="9" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/kuze_business_utils-v11.js" />
      <jump line="5152" column="23" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="12" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="22" column="24" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="24" column="48" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="26" column="28" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="28" column="52" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="47" column="27" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="53" column="27" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="28" column="14" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="1959" column="24" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="140" column="0" filename="$USER_HOME$/Projects/kuze/php/kuze_general_business_utils.php" />
      <jump line="14" column="15" filename="$USER_HOME$/Projects/kuze/php/kuze_general_business_utils.php" />
      <jump line="84" column="40" filename="$USER_HOME$/Projects/kuze/php/angular/business_config.php" />
      <jump line="94" column="0" filename="$USER_HOME$/Projects/kuze/php/kuze_general_business_utils.php" />
      <jump line="8" column="0" filename="$USER_HOME$/Projects/kuze/php/kuze_general_business_utils.php" />
      <jump line="142" column="0" filename="$USER_HOME$/Projects/kuze/php/kuze_general_business_utils.php" />
      <jump line="5496" column="11" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="1187" column="20" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/kuze_enduser_app.js" />
      <jump line="1857" column="9" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="1239" column="11" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="1867" column="9" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="1280" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="1281" column="9" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="1844" column="26" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="5501" column="12" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="5502" column="25" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="5482" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="5507" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="5575" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="5658" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="5775" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="5813" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="141" column="30" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="147" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="150" column="28" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="185" column="3" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="199" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="319" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="335" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="349" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="368" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="409" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="419" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="565" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="613" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="639" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="22" column="54" filename="$USER_HOME$/Projects/kuze/php/angular/business_modal_client_payment.php" />
      <jump line="1960" column="82" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="1998" column="12" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="2450" column="3" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="2729" column="13" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="2773" column="13" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="2790" column="13" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="2807" column="13" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="2895" column="30" filename="$USER_HOME$/Projects/kuze/php/api/api_admin.php" />
      <jump line="179" column="34" filename="$USER_HOME$/Projects/kuze/php/kuze_payment_utils.php" />
      <jump line="7" column="27" filename="$USER_HOME$/Projects/kuze/php/kuze_payment_utils.php" />
      <jump line="129" column="24" filename="$USER_HOME$/Projects/kuze/php/kuze_general_business_utils.php" />
      <jump line="44" column="41" filename="$USER_HOME$/Projects/kuze/php/angular/business_modal_client_payment.php" />
      <jump line="1920" column="42" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5850" column="0" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="5" column="21" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.php" />
      <jump line="1855" column="26" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="1271" column="26" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="1275" column="18" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="1839" column="9" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/business-app-v11.js" />
      <jump line="833" column="9" filename="$USER_HOME$/Projects/kuze/php/public/js/angular/kuze_business_utils-v11.js" />
    </jumps>
    <registers>
      <register name="&quot;" type="4">
        <text encoding="base64">IA==</text>
      </register>
      <register name="-" type="4">
        <text encoding="base64">IA==</text>
      </register>
      <register name="/" type="4">
        <text encoding="base64">XDxwYXltZW50TWV0aG9kc1w+</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">QUxURVIgVEFCTEUga3pfdXNlcl9wYXltZW50cwogIEFERCAoCiAgcGF5bWVudF9hbW91bnRfbm9fdmF0IEZMT0FUCiAgKTsK</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">ICAgICAgPGRpdiBjbGFzcz0iIgo=</text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">ICA8ZGl2Cg==</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">ICAgIDxkaXYgY2wK</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICAgIAo=</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICBjb25zb2xlLmxvZygiUGF5bWVudCBtZXRob2RzIiwgcGF5bWVudE1ldGhvZHMpOwo=</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">Ly8gdjExIC0gMjMgbWFyY2ggMjAxCg==</text>
      </register>
      <register name="7" type="4">
        <text encoding="base64"></text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">PD9waHAKcmVxdWlyZV9vbmNlKCRfU0VSVkVSWydET0NVTUVOVF9ST09UJ10uIi9rdXplX2xhbmcucGhwIik7Cj8+Cg==</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name=":" type="4">
        <text encoding="base64">JzwsJz5zL3Jlc3VsdFwuYnVzaW5lc3NQcm9wZXJ0aWVzL3Jlc3VsdC9n</text>
      </register>
    </registers>
    <search>
      <last-search encoding="base64">XDxwYXltZW50TWV0aG9kc1w+</last-search>
      <last-offset />
      <last-pattern encoding="base64">XDxwYXltZW50TWV0aG9kc1w+</last-pattern>
      <last-replace>result</last-replace>
      <last-substitute>result\.businessProperties</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">XDxzZXRQYXJ0aWNpcGF0aW9uU3RhdHVzXD4=</entry>
        <entry>select</entry>
        <entry>ng-change</entry>
        <entry>business</entry>
        <entry>setParticpatio</entry>
        <entry>setParticipation</entry>
        <entry>updateBusinessConfig</entry>
        <entry>business_config</entry>
        <entry>invoice</entry>
        <entry>updateBusiness</entry>
        <entry encoding="base64">XDxzZWxlY3RQYXltZW50TWV0aG9kXD4=</entry>
        <entry>get_business</entry>
        <entry>\$scope</entry>
        <entry>result\.businessProperties</entry>
        <entry encoding="base64">XDxrdXplQXBwXD4=</entry>
        <entry>admin</entry>
        <entry>admin\/users?\/payment</entry>
        <entry>payment</entry>
        <entry>admin\/users\/payment</entry>
        <entry encoding="base64">XDxwYXltZW50TWV0aG9kc1w+</entry>
      </history-search>
      <history-cmd>
        <entry>w</entry>
        <entry encoding="base64">JzwsJz5zL1xeL34v</entry>
        <entry>s</entry>
        <entry encoding="base64">JzwsJz5zL1wqLyoqL2c=</entry>
        <entry encoding="base64">JzwsJz5zL1wkc2NvcGUvcmVzdWx0L2c=</entry>
        <entry encoding="base64">JzwsJz5zL3Jlc3VsdFwuYnVzaW5lc3NQcm9wZXJ0aWVzL3Jlc3VsdC9n</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed OPEN_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>shift ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed CLOSE_BRACKET</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>